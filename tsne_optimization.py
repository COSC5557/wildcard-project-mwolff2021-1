# -*- coding: utf-8 -*-
"""TSNE Optimization

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XUcNO2iKKVyfDMo9Qjl8KGawoTetwXtZ
"""

#https://scikit-optimize.github.io/stable/auto_examples/sklearn-gridsearchcv-replacement.html#sphx-glr-auto-examples-sklearn-gridsearchcv-replacement-py
#https://skopt.readthedocs.io/en/stable/install.html
#https://tex.stackexchange.com/questions/480652/prevent-table-from-going-off-page-how
#install and import packages
!pip install --upgrade scikit-learn
!pip install pandas
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import sklearn

#suppress warnings about class imbalances
import warnings
warnings.filterwarnings("ignore")

#import models, packages
from sklearn import linear_model, ensemble, manifold
from sklearn.model_selection import cross_val_score
from sklearn import model_selection
import numpy

!pip install scikit-optimize
import skopt
from skopt.space import Real, Categorical, Integer
from skopt import BayesSearchCV

#import grid search and cross_validate
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import cross_validate

#read and display data
data = pd.read_csv("/content/winequality-red.csv", sep = ";")

#split into features/target
x = data.drop(columns = ['quality'])
#attemptd normalization at one point but this step yielded lower performance
#x_norm = sklearn.preprocessing.normalize(x, axis=0)
y = data['quality']

from sklearn.metrics import make_scorer
#kl_div = make_scorer(sklearn.manifold.TSNE().fit(x).kl_divergence_)
#sne.fit_transform(S_points)
from scipy.special import rel_entr

#from sklearn.metrics.scorer import make_scorer

def kl_div_loss(x1, x2):
    return sum(rel_entr(x1, x2))

kl_div = make_scorer(kl_div_loss, greater_is_better=False)

#calculate (P || Q)
#kl_div = make_scorer(sum(rel_entr(y, y_pred)))

tsne = BayesSearchCV(sklearn.manifold.TSNE(),
    {
    "n_components" : Integer(1, 4, prior  = 'log-uniform'),
    "perplexity" : Real(5.0, 50.0, prior = 'log-uniform'),
    "early_exaggeration" : Real(1.0, 25.0, prior = 'log-uniform'),
    "n_iter" : Integer(250, 10000, prior = 'log-uniform'),
    },
                   scoring = kl_div
)

_ = tsne.fit(x)

